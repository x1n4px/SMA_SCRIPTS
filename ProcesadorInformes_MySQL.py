#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script unificado para procesar informes de meteoros
Permite procesar todos los informes o filtrar por fechas/tipos
"""

import sys
import os
import math
import pathlib
from datetime import datetime, timedelta
import mysql.connector
from mysql.connector import Error
from typing import List, Tuple, Optional

# =============================================================================
# IMPORTAR CONFIGURACI√ìN CENTRALIZADA
# =============================================================================
try:
    from config_db import DB_CONFIG, CONNECTION_CONFIG, TABLES, validate_config, get_connection_string
except ImportError:
    print("‚ùå Error: No se pudo importar config_db.py")
    print("üîß Aseg√∫rate de que el archivo config_db.py existe en el directorio actual")
    sys.exit(1)

# =============================================================================
# CLASE PRINCIPAL DEL PROCESADOR
# =============================================================================
class ProcesadorInformes:
    def __init__(self):
        """Inicializa el procesador de informes"""
        self.cnxn = None
        self.cursor = None
        self.estadisticas = {
            'fotometria': {'procesados': 0, 'omitidos': 0, 'errores': 0},
            'radiante': {'procesados': 0, 'omitidos': 0, 'errores': 0},
            'z': {'procesados': 0, 'omitidos': 0, 'errores': 0}
        }
        
    def conectar_db(self) -> bool:
        """Establece conexi√≥n con la base de datos MySQL usando configuraci√≥n centralizada"""
        # Validar configuraci√≥n
        config_valida, mensaje = validate_config()
        if not config_valida:
            print(f"‚ùå Error en configuraci√≥n: {mensaje}")
            return False
        
        try:
            # Crear copia de configuraci√≥n con timeout
            config_con_timeout = DB_CONFIG.copy()
            config_con_timeout['connection_timeout'] = CONNECTION_CONFIG.get('connection_timeout', 30)
            
            print(f"üîÑ Conectando a {get_connection_string()}")
            self.cnxn = mysql.connector.connect(**config_con_timeout)
            self.cursor = self.cnxn.cursor()
            print("‚úÖ Conexi√≥n establecida con la base de datos")
            return True
        except mysql.connector.Error as e:
            print(f"‚ùå Error de conexi√≥n MySQL: {e}")
            return False
    
    def cerrar_db(self):
        """Cierra la conexi√≥n con la base de datos"""
        if self.cursor:
            self.cursor.close()
        if self.cnxn:
            self.cnxn.close()
        print("‚úì Conexi√≥n cerrada")
    
    def verificar_informe_existe(self, tipo_informe: str, fecha: str, hora: str) -> bool:
        """
        Verifica si un informe ya existe en la base de datos
        
        Args:
            tipo_informe: 'fotometria', 'radiante' o 'z'
            fecha: Fecha en formato YYYY-MM-DD
            hora: Hora en formato HH:MM:SS.mmm
        
        Returns:
            True si el informe existe, False en caso contrario
        """
        tablas = {
            'fotometria': 'Informe_Fotometria',
            'radiante': 'Informe_Radiante',
            'z': 'Informe_Z'
        }
        
        if tipo_informe not in tablas:
            return False
        
        tabla = tablas[tipo_informe]
        id_campo = 'Identificador' if tipo_informe != 'z' else 'IdInforme'
        
        query = f"SELECT {id_campo} FROM {tabla} WHERE Fecha = %s AND Hora = %s"
        self.cursor.execute(query, (fecha, hora))
        resultado = self.cursor.fetchone()
        
        return resultado is not None
    
    def obtener_fecha_hora_de_ruta(self, ruta: str) -> Tuple[str, str]:
        """
        Extrae fecha y hora de la estructura del directorio
        Formato: .../yyyymmdd/hhmmss/...
        
        Returns:
            Tupla (fecha, hora) en formato MySQL
        """
        partes = ruta.split('/')
        
        # Buscar la fecha (yyyymmdd)
        fecha_str = None
        hora_str = None
        
        for i, parte in enumerate(partes):
            # Buscar fecha en formato yyyymmdd
            if len(parte) == 8 and parte.isdigit():
                fecha_str = parte
                # La hora deber√≠a estar en la siguiente carpeta
                if i + 1 < len(partes) and len(partes[i + 1]) >= 6:
                    hora_str = partes[i + 1]
                    break
        
        if not fecha_str or not hora_str:
            return None, None
        
        # Convertir fecha a formato MySQL
        fecha = f"{fecha_str[:4]}-{fecha_str[4:6]}-{fecha_str[6:8]}"
        
        # Convertir hora a formato MySQL
        if len(hora_str) >= 6:
            hora = f"{hora_str[:2]}:{hora_str[2:4]}:{hora_str[4:6]}"
            if len(hora_str) > 6:
                hora += f".{hora_str[6:]}"
        else:
            hora = "00:00:00"
        
        return fecha, hora
    
    def filtrar_por_fecha(self, fecha_str: str, fecha_inicio: datetime, fecha_fin: datetime) -> bool:
        """
        Verifica si una fecha est√° dentro del rango especificado
        """
        try:
            # fecha_str formato: yyyymmdd
            fecha = datetime.strptime(fecha_str, "%Y%m%d")
            return fecha_inicio <= fecha <= fecha_fin
        except:
            return False
    
    def buscar_informes(self, directorio_base: str, filtro_fecha: Optional[Tuple[datetime, datetime]] = None) -> List[Tuple[str, str]]:
        """
        Busca todos los informes en el directorio especificado
        
        Returns:
            Lista de tuplas (ruta_completa, tipo_informe)
        """
        informes = []
        
        # Patrones de b√∫squeda para cada tipo de informe
        patrones = {
            'fotometria': 'Informe-fotometria',
            'radiante': 'Informe-Radiante',
            'z': 'Informe-Z'
        }
        
        print(f"\nüîç Buscando informes en: {directorio_base}")
        
        for root, dirs, files in os.walk(directorio_base):
            # Si hay filtro de fecha, verificar la carpeta
            if filtro_fecha:
                partes = root.split('/')
                fecha_carpeta = None
                for parte in partes:
                    if len(parte) == 8 and parte.isdigit():
                        fecha_carpeta = parte
                        break
                
                if fecha_carpeta and not self.filtrar_por_fecha(fecha_carpeta, filtro_fecha[0], filtro_fecha[1]):
                    continue
            
            for archivo in files:
                for tipo, patron in patrones.items():
                    if archivo.startswith(patron):
                        # Excluir archivos .kml para informes Z
                        if tipo == 'z' and archivo.endswith('.kml'):
                            continue
                        
                        ruta_completa = os.path.join(root, archivo)
                        informes.append((ruta_completa, tipo))
        
        print(f"‚úì Encontrados {len(informes)} informes")
        return informes
    
    def procesar_informe_fotometria(self, ruta: str, archivo: str) -> bool:
        """Procesa un informe de fotometr√≠a"""
        try:
            fecha, hora = self.obtener_fecha_hora_de_ruta(ruta)
            if not fecha or not hora:
                print(f"  ‚ö† No se pudo extraer fecha/hora de la ruta")
                return False
            
            # Verificar si ya existe
            if self.verificar_informe_existe('fotometria', fecha, hora):
                self.estadisticas['fotometria']['omitidos'] += 1
                return False
            
            # Aqu√≠ ir√≠a el c√≥digo de procesamiento del informe de fotometr√≠a
            # (copiar la l√≥gica del script CargaInformesFot_MySQL.py)
            
            self.estadisticas['fotometria']['procesados'] += 1
            print(f"  ‚úì Procesado: {archivo}")
            return True
            
        except Exception as e:
            self.estadisticas['fotometria']['errores'] += 1
            print(f"  ‚úó Error procesando {archivo}: {e}")
            return False
    
    def procesar_informe_radiante(self, ruta: str, archivo: str) -> bool:
        """Procesa un informe de radiante"""
        try:
            fecha, hora = self.obtener_fecha_hora_de_ruta(ruta)
            if not fecha or not hora:
                # Intentar extraer del nombre del archivo
                if len(archivo) > 29:
                    year = archivo[17:21]
                    mes = archivo[21:23]
                    dia = archivo[23:25]
                    hora_i = archivo[25:27]
                    min_i = archivo[27:29]
                    seg_i = archivo[29:36] if len(archivo) > 36 else archivo[29:31] + ".0000"
                    
                    fecha = f"{year}-{mes}-{dia}"
                    hora = f"{hora_i}:{min_i}:{seg_i}"
                else:
                    print(f"  ‚ö† No se pudo extraer fecha/hora")
                    return False
            
            # Verificar si ya existe
            if self.verificar_informe_existe('radiante', fecha, hora):
                self.estadisticas['radiante']['omitidos'] += 1
                return False
            
            # Aqu√≠ ir√≠a el c√≥digo de procesamiento del informe de radiante
            # (copiar la l√≥gica del script CargaInformesRad_MySQL.py)
            
            self.estadisticas['radiante']['procesados'] += 1
            print(f"  ‚úì Procesado: {archivo}")
            return True
            
        except Exception as e:
            self.estadisticas['radiante']['errores'] += 1
            print(f"  ‚úó Error procesando {archivo}: {e}")
            return False
    
    def procesar_informe_z(self, ruta: str, archivo: str) -> bool:
        """Procesa un informe Z"""
        try:
            # Extraer fecha y hora del contenido del archivo
            with open(os.path.join(ruta, archivo), 'r', encoding='utf-8') as f:
                primera_linea = f.readline().strip()
            
            if len(primera_linea) >= 24:
                year = primera_linea[:4]
                mes = primera_linea[5:7]
                dia = primera_linea[8:10]
                hora_i = primera_linea[11:13]
                min_i = primera_linea[14:16]
                seg_i = primera_linea[17:24]
                
                fecha = f"{year}-{mes}-{dia}"
                hora = f"{hora_i}:{min_i}:{seg_i}"
            else:
                print(f"  ‚ö† No se pudo extraer fecha/hora del archivo")
                return False
            
            # Verificar si ya existe
            if self.verificar_informe_existe('z', fecha, hora):
                self.estadisticas['z']['omitidos'] += 1
                return False
            
            # Aqu√≠ ir√≠a el c√≥digo de procesamiento del informe Z
            # (copiar la l√≥gica del script CargaInformesZ_MySQL.py)
            
            self.estadisticas['z']['procesados'] += 1
            print(f"  ‚úì Procesado: {archivo}")
            return True
            
        except Exception as e:
            self.estadisticas['z']['errores'] += 1
            print(f"  ‚úó Error procesando {archivo}: {e}")
            return False
    
    def procesar_informes(self, informes: List[Tuple[str, str]], tipos_permitidos: List[str] = None):
        """
        Procesa una lista de informes
        
        Args:
            informes: Lista de tuplas (ruta_completa, tipo_informe)
            tipos_permitidos: Lista de tipos a procesar (None = todos)
        """
        total = len(informes)
        procesados = 0
        
        print(f"\nüìä Procesando {total} informes...")
        print("=" * 60)
        
        for i, (ruta_completa, tipo) in enumerate(informes, 1):
            # Filtrar por tipo si se especifica
            if tipos_permitidos and tipo not in tipos_permitidos:
                continue
            
            directorio = os.path.dirname(ruta_completa)
            archivo = os.path.basename(ruta_completa)
            
            print(f"\n[{i}/{total}] Procesando {tipo}: {archivo}")
            print(f"  üìÅ {directorio}")
            
            # Procesar seg√∫n el tipo
            if tipo == 'fotometria':
                if self.procesar_informe_fotometria(directorio, archivo):
                    procesados += 1
            elif tipo == 'radiante':
                if self.procesar_informe_radiante(directorio, archivo):
                    procesados += 1
            elif tipo == 'z':
                if self.procesar_informe_z(directorio, archivo):
                    procesados += 1
        
        print("\n" + "=" * 60)
        print(f"‚úì Procesamiento completado: {procesados}/{total} informes procesados")
    
    def mostrar_estadisticas(self):
        """Muestra las estad√≠sticas del procesamiento"""
        print("\n" + "=" * 60)
        print("üìà ESTAD√çSTICAS DEL PROCESAMIENTO")
        print("=" * 60)
        
        for tipo, stats in self.estadisticas.items():
            total = stats['procesados'] + stats['omitidos'] + stats['errores']
            if total > 0:
                print(f"\n{tipo.upper()}:")
                print(f"  ‚úì Procesados: {stats['procesados']}")
                print(f"  ‚äò Omitidos (ya existen): {stats['omitidos']}")
                print(f"  ‚úó Errores: {stats['errores']}")
                print(f"  Œ£ Total: {total}")

# =============================================================================
# FUNCIONES DE INTERFAZ DE USUARIO
# =============================================================================
def mostrar_menu_principal():
    """Muestra el men√∫ principal"""
    print("\n" + "=" * 60)
    print("üåü PROCESADOR DE INFORMES DE METEOROS")
    print("=" * 60)
    print("\nOpciones de procesamiento:")
    print("  1. Procesar TODOS los informes")
    print("  2. Procesar por RANGO DE FECHAS")
    print("  3. Procesar por TIPO de informe")
    print("  4. Procesar FECHA ESPEC√çFICA")
    print("  5. Configurar base de datos")
    print("  0. Salir")
    print("-" * 60)

def obtener_rango_fechas() -> Tuple[datetime, datetime]:
    """Solicita al usuario un rango de fechas"""
    while True:
        try:
            print("\nüìÖ Ingrese el rango de fechas:")
            fecha_inicio_str = input("  Fecha inicio (YYYY-MM-DD): ")
            fecha_fin_str = input("  Fecha fin (YYYY-MM-DD): ")
            
            fecha_inicio = datetime.strptime(fecha_inicio_str, "%Y-%m-%d")
            fecha_fin = datetime.strptime(fecha_fin_str, "%Y-%m-%d")
            
            if fecha_inicio > fecha_fin:
                print("  ‚ö† La fecha de inicio debe ser anterior a la fecha fin")
                continue
            
            # Ajustar para incluir todo el d√≠a final
            fecha_fin = fecha_fin + timedelta(days=1, seconds=-1)
            
            return fecha_inicio, fecha_fin
            
        except ValueError:
            print("  ‚ö† Formato de fecha inv√°lido. Use YYYY-MM-DD")

def obtener_tipos_informe() -> List[str]:
    """Solicita al usuario qu√© tipos de informes procesar"""
    print("\nüìã Seleccione los tipos de informes a procesar:")
    print("  1. Fotometr√≠a")
    print("  2. Radiante")
    print("  3. Z")
    print("  4. Todos")
    
    opcion = input("\nOpci√≥n (puede elegir varios, ej: 1,2): ").strip()
    
    if '4' in opcion or opcion == '':
        return ['fotometria', 'radiante', 'z']
    
    tipos = []
    if '1' in opcion:
        tipos.append('fotometria')
    if '2' in opcion:
        tipos.append('radiante')
    if '3' in opcion:
        tipos.append('z')
    
    return tipos if tipos else ['fotometria', 'radiante', 'z']

def configurar_base_datos():
    """Permite al usuario configurar la conexi√≥n a la base de datos"""
    print("\n‚öôÔ∏è  CONFIGURACI√ìN DE BASE DE DATOS")
    print("-" * 40)
    
    DB_CONFIG['host'] = input(f"Host [{DB_CONFIG['host']}]: ") or DB_CONFIG['host']
    port_str = input(f"Puerto [{DB_CONFIG['port']}]: ")
    if port_str:
        DB_CONFIG['port'] = int(port_str)
    DB_CONFIG['database'] = input(f"Base de datos [{DB_CONFIG['database']}]: ") or DB_CONFIG['database']
    DB_CONFIG['user'] = input(f"Usuario [{DB_CONFIG['user']}]: ") or DB_CONFIG['user']
    DB_CONFIG['password'] = input("Contrase√±a: ") or DB_CONFIG['password']
    
    print("‚úì Configuraci√≥n actualizada")

# =============================================================================
# FUNCI√ìN PRINCIPAL
# =============================================================================
def main():
    """Funci√≥n principal del programa"""
    procesador = ProcesadorInformes()
    
    # Directorio base por defecto
    directorio_base = "Carpeta-meteoro-procesado"
    
    while True:
        mostrar_menu_principal()
        opcion = input("\nSeleccione una opci√≥n: ").strip()
        
        if opcion == '0':
            print("\nüëã ¬°Hasta luego!")
            break
        
        elif opcion == '5':
            configurar_base_datos()
            continue
        
        elif opcion in ['1', '2', '3', '4']:
            # Solicitar directorio si no se especific√≥ por l√≠nea de comandos
            if len(sys.argv) > 1:
                directorio_base = sys.argv[1]
            else:
                dir_input = input(f"\nüìÅ Directorio base [{directorio_base}]: ").strip()
                if dir_input:
                    directorio_base = dir_input
            
            # Verificar que el directorio existe
            if not os.path.exists(directorio_base):
                print(f"‚úó El directorio '{directorio_base}' no existe")
                continue
            
            # Conectar a la base de datos
            if not procesador.conectar_db():
                continue
            
            try:
                filtro_fecha = None
                tipos_permitidos = None
                
                if opcion == '1':
                    # Procesar todos
                    print("\n‚ôæÔ∏è  Procesando TODOS los informes...")
                    
                elif opcion == '2':
                    # Procesar por rango de fechas
                    filtro_fecha = obtener_rango_fechas()
                    print(f"\nüìÖ Procesando del {filtro_fecha[0].date()} al {filtro_fecha[1].date()}")
                    
                elif opcion == '3':
                    # Procesar por tipo
                    tipos_permitidos = obtener_tipos_informe()
                    print(f"\nüìã Procesando tipos: {', '.join(tipos_permitidos)}")
                    
                elif opcion == '4':
                    # Procesar fecha espec√≠fica
                    fecha_str = input("\nüìÖ Fecha espec√≠fica (YYYY-MM-DD): ")
                    fecha = datetime.strptime(fecha_str, "%Y-%m-%d")
                    filtro_fecha = (fecha, fecha + timedelta(days=1, seconds=-1))
                    print(f"\nüìÖ Procesando fecha: {fecha.date()}")
                
                # Buscar informes
                informes = procesador.buscar_informes(directorio_base, filtro_fecha)
                
                if not informes:
                    print("\n‚ö† No se encontraron informes con los criterios especificados")
                else:
                    # Confirmar procesamiento
                    print(f"\n¬øProcesar {len(informes)} informes? (S/N): ", end='')
                    if input().upper() == 'S':
                        procesador.procesar_informes(informes, tipos_permitidos)
                        procesador.mostrar_estadisticas()
                
            finally:
                procesador.cerrar_db()
        
        else:
            print("‚ö† Opci√≥n no v√°lida")
        
        input("\nPresione ENTER para continuar...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö† Proceso interrumpido por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚úó Error inesperado: {e}")
        sys.exit(1)