#!/usr/bin/env python3
"""
Ejemplo de c√≥mo usar la configuraci√≥n centralizada de base de datos en otros scripts.
Este archivo sirve como plantilla para actualizar otros scripts del sistema.
"""

import mysql.connector
from mysql.connector import Error
import sys

# Importar la configuraci√≥n centralizada
try:
    from config_db import DB_CONFIG, CONNECTION_CONFIG, TABLES, validate_config, get_connection_string
except ImportError:
    print("‚ùå Error: No se pudo importar config_db.py")
    print("üîß Aseg√∫rate de que el archivo config_db.py existe en el directorio actual")
    sys.exit(1)


def conectar_db():
    """
    Ejemplo de funci√≥n para conectar a la base de datos usando la configuraci√≥n centralizada.
    """
    # Validar configuraci√≥n
    config_valida, mensaje = validate_config()
    if not config_valida:
        print(f"‚ùå Error en configuraci√≥n: {mensaje}")
        return None
    
    try:
        print(f"üîÑ Conectando a {get_connection_string()}")
        
        # Conectar usando la configuraci√≥n centralizada
        conexion = mysql.connector.connect(**DB_CONFIG)
        
        if conexion.is_connected():
            print("‚úÖ Conexi√≥n exitosa")
            return conexion
            
    except Error as e:
        print(f"‚ùå Error al conectar: {e}")
        return None


def ejemplo_consulta(conexion):
    """
    Ejemplo de c√≥mo usar los nombres de tabla desde la configuraci√≥n.
    """
    cursor = conexion.cursor()
    
    # Usar nombres de tabla desde la configuraci√≥n
    tabla_meteoro = TABLES.get('meteoro', 'Meteoro')
    tabla_observatorio = TABLES.get('observatorio', 'Observatorio')
    
    # Ejemplo de consulta
    query = f"""
    SELECT COUNT(*) 
    FROM {tabla_meteoro}
    """
    
    try:
        cursor.execute(query)
        resultado = cursor.fetchone()
        print(f"üìä Total de registros en {tabla_meteoro}: {resultado[0]}")
        
    except Error as e:
        print(f"‚ùå Error en consulta: {e}")
    finally:
        cursor.close()


def main():
    """
    Funci√≥n principal de ejemplo.
    """
    print("=" * 50)
    print("EJEMPLO DE USO DE CONFIGURACI√ìN CENTRALIZADA")
    print("=" * 50)
    
    # Mostrar informaci√≥n de configuraci√≥n
    print(f"\nüîß Configuraci√≥n de Base de Datos:")
    print(f"   Base de datos: {DB_CONFIG.get('database')}")
    print(f"   Servidor: {DB_CONFIG.get('host')}:{DB_CONFIG.get('port', 3306)}")
    print(f"   Usuario: {DB_CONFIG.get('user')}")
    print(f"   Charset: {DB_CONFIG.get('charset')}")
    
    print(f"\nüîß Configuraci√≥n de Conexi√≥n:")
    print(f"   Timeout: {CONNECTION_CONFIG.get('connection_timeout')} segundos")
    print(f"   Reintentos: {CONNECTION_CONFIG.get('retry_attempts')}")
    print(f"   Delay entre reintentos: {CONNECTION_CONFIG.get('retry_delay')} segundos")
    
    # Conectar a la base de datos
    conexion = conectar_db()
    
    if conexion:
        try:
            # Ejecutar consulta de ejemplo
            ejemplo_consulta(conexion)
            
        finally:
            if conexion.is_connected():
                conexion.close()
                print("\n‚úÖ Conexi√≥n cerrada")
    else:
        print("\n‚ùå No se pudo establecer conexi√≥n")


# ===========================
# PLANTILLA PARA ACTUALIZAR OTROS SCRIPTS
# ===========================

"""
INSTRUCCIONES PARA ACTUALIZAR OTROS SCRIPTS:

1. Agregar el import al inicio del archivo:
   
   from config_db import DB_CONFIG, CONNECTION_CONFIG, TABLES, validate_config

2. Reemplazar las credenciales hardcodeadas:
   
   ANTES:
   conexion = mysql.connector.connect(
       host='localhost',
       database='astro',
       user='in4p',
       password='0000'
   )
   
   DESPU√âS:
   conexion = mysql.connector.connect(**DB_CONFIG)

3. Usar nombres de tabla desde la configuraci√≥n:
   
   ANTES:
   query = "SELECT * FROM Meteoro"
   
   DESPU√âS:
   tabla_meteoro = TABLES.get('meteoro', 'Meteoro')
   query = f"SELECT * FROM {tabla_meteoro}"

4. Validar la configuraci√≥n antes de conectar:
   
   config_valida, mensaje = validate_config()
   if not config_valida:
       print(f"Error: {mensaje}")
       return None

5. Usar los par√°metros de reintentos si es necesario:
   
   max_intentos = CONNECTION_CONFIG.get('retry_attempts', 3)
   delay = CONNECTION_CONFIG.get('retry_delay', 5)
"""

if __name__ == "__main__":
    main()